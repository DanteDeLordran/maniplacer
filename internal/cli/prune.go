package cli

import (
	"fmt"
	"os"
	"path/filepath"

	"github.com/dantedelordran/maniplacer/internal/utils"
	"github.com/spf13/cobra"
)

var pruneCmd = &cobra.Command{
	Use:   "prune",
	Short: "Removes every created manifest given a namespace",
	Long: `The prune command deletes all manifests generated by Maniplacer under a specific namespace. 

By default, it targets the 'default' namespace, but you can override this with the --namespace (or -n) flag. You must also specify the target repository with the --repo (or -r) flag.

Before deletion, the command ensures:
- You are inside a valid Maniplacer project.
- The manifests directory for the namespace exists and is not empty.
- You explicitly confirm the deletion to prevent accidental data loss.

This command is especially useful for:
- Cleaning up old or unused manifests before generating fresh ones.
- Resetting environments between deployments.
- Freeing up space and avoiding clutter in your project.

Example usage:
  maniplacer prune
  maniplacer prune -n staging -r myrepo

If confirmed, this will remove all manifests inside the 'staging' namespace of the 'myrepo' repository.`,
	Args: cobra.MaximumNArgs(0),
	Run: func(cmd *cobra.Command, args []string) {

		if !utils.IsValidProject() {
			fmt.Printf("Current directory is not a valid Maniplacer project\n")
			os.Exit(1)
		}

		confirmed := utils.ConfirmMessage("Confirm from deleting manifests?")

		namespace, err := cmd.Flags().GetString("namespace")
		if err != nil {
			fmt.Printf("Could not parse namespace flag, using default\n")
			namespace = "default"
		}

		repo, err := cmd.Flags().GetString("repo")
		if err != nil {
			fmt.Printf("Could not get repo flag due to %s\n", err)
			os.Exit(1)
		}

		currentDir, err := os.Getwd()
		if err != nil {
			fmt.Printf("Could not get current dir due to %s\n", err)
			os.Exit(1)
		}

		currentDir = filepath.Join(currentDir, repo, "manifests", namespace)

		_, err = os.Stat(currentDir)
		if err != nil {
			fmt.Printf("Manifest dir does not exists %s\n", err)
			os.Exit(1)
		}

		files, err := os.ReadDir(currentDir)
		if err != nil {
			fmt.Printf("Could not read manifests dir due to %s\n", err)
			os.Exit(1)
		}

		if len(files) == 0 {
			fmt.Printf("No manifests on %s namespace\n", namespace)
			return
		}

		if !confirmed {
			fmt.Printf("No manifest will be deleted :P\n")
		} else {
			fmt.Printf("Deleting manifests in %s namespace...\n", namespace)
			for _, file := range files {
				err = os.RemoveAll(filepath.Join(currentDir, file.Name()))
				if err != nil {
					fmt.Printf("Could not delete %s due to %s, skipping...\n", file.Name(), err)
					continue
				}
				fmt.Printf("Successfully deleted %s\n", file.Name())
			}
		}

	},
}

func init() {
	rootCmd.AddCommand(pruneCmd)
	pruneCmd.Flags().StringP("namespace", "n", "default", "Namespace for pruning manifests")
	pruneCmd.Flags().StringP("repo", "r", "", "Repo name")
}
